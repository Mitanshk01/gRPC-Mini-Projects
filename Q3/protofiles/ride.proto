syntax = "proto3";

package ride_sharing;

option go_package = "github.com/Mitanshk01/DS_HW4/Q3/protofiles";

message RideRequest {
    string rider_id = 1;
    string pickup_location = 2;
    string destination = 3;
}

message AssignmentRequest {
    string driver_id = 1;
}

message RideResponse {
    string ride_id = 1;
    string driver_id = 2;
    string status = 3;
}

message RideStatusRequest {
    string ride_id = 1;
}

message RideStatusResponse {
    string ride_id = 1;
    string status = 2;
}

message AcceptRideRequest {
    string driver_id = 1;
    string ride_id = 2;
}

message AcceptRideResponse {
    string status = 1;
}

message RejectRideRequest {
    string driver_id = 1;
    string ride_id = 2;
}

message RejectRideResponse {
    string status = 1;
}

message RideCompletionRequest {
    string ride_id = 1;
    string driver_id = 2;
}

message RideCompletionResponse {
    string status = 1;
}

message GetDriverStatusRequest {
    string driver_id = 1;
}

message GetDriverStatusResponse {
    string driver_id = 1;
    string status = 2;
}

message UpdateRideStatusRequest {
    string ride_id = 1;
    string status = 2;
}

message UpdateRideStatusResponse {
    string ride_id = 1;
    string status = 2;
}

message AssignmentResponse {
    string ride_id = 1;
    string rider_id = 2;
    string pickup_location = 3;
    string destination = 4;
}

service RiderService {
    rpc RequestRide(RideRequest) returns (RideResponse);
    rpc GetRideStatus(RideStatusRequest) returns (RideStatusResponse);
}

service DriverService {
    rpc AcceptRide(AcceptRideRequest) returns (AcceptRideResponse);
    rpc RejectRide(RejectRideRequest) returns (RejectRideResponse);
    rpc CompleteRide(RideCompletionRequest) returns (RideCompletionResponse);

    rpc GetRideRequest(AssignmentRequest) returns (stream AssignmentResponse);
    
    rpc UpdateRideStatus(UpdateRideStatusRequest) returns (UpdateRideStatusResponse);
}
